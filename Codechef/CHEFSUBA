#include<bits/stdc++.h>
using namespace std;

int main() {
	int N,K,P;
	cin>>N>>K>>P;
	int arr[N];
	for(int i=0; i<N; i++)
	{
	    cin>>arr[i];
	}
	if(K >N)
	  {
	   int exc;
	   exc=count(arr, arr+N,1);
	   for(int q=0; q<P; q++)
	   {
	    char c;
	    cin>>c;
	    if(c=='?')
	    cout<<exc<<endl;
	   }
	  }
	 else{
	int cnt_arr[N];
	int counter=0;
	for(int i=0; i<K; i++)
		if(arr[i] == 1)
		 counter++;
		 cnt_arr[0] = counter;
	for(int j=1; j<N; j++)
	    {
	         if(arr[(j+K-1)%N] == 1)
	           counter++;
	         if(arr[j-1] == 1)
	         	counter--;
	         cnt_arr[j] = counter;
	    }
	int start = N-K+1, End = N-1;
	multiset<int> arr_mset(cnt_arr,cnt_arr+start);
	multiset<int>::iterator it;
	for(int i=0; i<P; i++)
	{
	    char c;
	    cin>>c;
	    if(c=='?'){
	       it=arr_mset.end();
          	 --it;
	            cout << *it<<endl;
	    }
	    else if(c =='!')
	    {
	        it=arr_mset.end();
		    arr_mset.insert(it,cnt_arr[End]);
		   if(start>0 && End >0)
	       {
	           start--;
	           End--;
	       }
	       else if(start == 0 && End > 0)
	       {
	           start = N-1;
	           End--;
	       }
	       else if(End == 0 && start > 0)
	       {
	           End = N-1;
	           start--;
	       }
	       arr_mset.erase(arr_mset.find(cnt_arr[start]));
	    }
	}
	 }
	return 0;
}
